"""
This type stub file was generated by pyright.
"""

from benedict import benedict

class DictInitializable:
    """ Implementors can be initialized from a dict or dict-like
    """
    @staticmethod
    def from_dict(d: dict):
        ...
    
    @classmethod
    def init_from_dict(cls, a_dict): # -> Self:
        ...
    
    @classmethod
    def init_from_object(cls, an_object): # -> Self:
        ...
    


class DictRepresentable(DictInitializable):
    def to_dict(self, recurrsively=...):
        ...
    


def get_dict_subset(a_dict, included_keys=..., require_all_keys=...): # -> dict[Any, Any]:
    """Gets a subset of a dictionary from a list of keys (included_keys)

    Args:
        a_dict ([type]): [description]
        included_keys ([type], optional): [description]. Defaults to None.
        require_all_keys: Bool, if True, requires all keys in included_keys to be in the dictionary (a_dict)

    Returns:
        [type]: [description]
    """
    ...

def override_dict(lhs_dict, rhs_dict):
    """returns lhs_dict overriden with the values specified in rhs_dict (if they exist), otherwise returning the extant values.
    """
    ...

def overriding_dict_with(lhs_dict, **kwargs):
    """returns lhs_dict overriden with the kwargs provided (if they exist), otherwise returning the extant values.
        Calls self.__ior__(other) under the hood.
    """
    ...

class DictlikeOverridableMixin:
    """ allows self to be overriden by a kwargs, a dict, or another DictlikeOverridableMixin (dict-like) 
    
    Usage:

        from neuropy.utils.dynamic_container import DictlikeInitializableMixin, DictlikeOverridableMixin
    
        
    """
    def to_dict(self):
        ...
    
    def __or__(self, other):
        """ Used with vertical bar operator: |
        
        Usage:
            (_test_complete_spike_analysis_config | _test_partial_spike_analysis_config)    
        """
        ...
    
    def __ior__(self, other):
        """ Used with vertical bar equals operator: |=
        
        Unlike __or__(self, other), does not allow keys present ONLY in other to be added to self.
            Identically like __or__(self, other) though, if a key is present in both self and other the value in OTHER will be used. 
        
        Usage:
            # Explicit __ior__ usage:
            out = DynamicContainer(**{'s': 2, 'gamma': 0.2}).__ior__(kwargs)

            # Multi-line "override" update:
            out = DynamicContainer(**{'s': 2, 'gamma': 0.2})
            out|=kwargs
            
            # WARNING: this is wrong! Must first have a DynamicContainer to call __ior__ on, not a plain dict inside the DynamicContainer initializer
            out = DynamicContainer(**({'s': 2, 'gamma': 0.2}.__ior__(kwargs))) # |=

        Testing:
        def _test_xor(**kwargs):
            # want it only to pass 's' and 'gamma' keys to create the container despite more keys being present in kwargs
            # out = DynamicContainer(**{'s': 2, 'gamma': 0.2}).__ior__(kwargs) # |=
            out = DynamicContainer(**{'s': 2, 'gamma': 0.2}).override(kwargs)
            # out = DynamicContainer(**{'s': 2, 'gamma': 0.2})
            # out|=kwargs
            print(f'{out}')
            return out
            # dict_or = self.to_dict().__or__(other_dict)
            
        _test_xor(s=3) # DynamicContainer({'s': 3, 'gamma': 0.2})
        _test_xor(s=3, m='vet') # DynamicContainer({'s': 3, 'gamma': 0.2})
        _test_xor(s=3, m='vet', gamma=0.9) # DynamicContainer({'s': 3, 'gamma': 0.9})

        """
        ...
    
    def overriding_with(self, **kwargs):
        """returns self overriden with the kwargs provided (if they exist), otherwise returning the extant values.
            Calls self.__ior__(other) under the hood.
        """
        ...
    
    def override(self, other):
        """returns self overriden with the values specified in other (if they exist), otherwise returning the extant values.
            Calls self.__ior__(other) under the hood.
        """
        ...
    


class SubsettableDictRepresentable(DictRepresentable):
    """ confomers can be subsettable
    requires `benedict` library: from benedict import benedict # https://github.com/fabiocaccamo/python-benedict#usage

    # SubsettableDictRepresentable: provides `to_dict`, `keys`, `keypaths`, `as_tuple`,`has_keys`, `check_keys`
    """
    def to_dict(self, subset_includelist=..., subset_excludelist=...) -> benedict:
        """ 
        Inputs:
            subset_includelist:<list?> a list of keys that specify the subset of the keys to be returned. If None, all are returned.
        """
        ...
    
    def keys(self, subset_includelist=..., subset_excludelist=...): # -> list[Any]:
        ...
    
    def keypaths(self, subset_includelist=..., subset_excludelist=...): # -> list[Any]:
        ...
    
    def as_tuple(self, subset_includelist=..., subset_excludelist=..., drop_missing: bool = ...): # -> tuple[Any, ...]:
        """ returns a tuple of just its values 
        Inputs:
            subset_includelist:<list?> a list of keys that specify the subset of the keys to be returned. If None, all are returned.

        Usage:
        curr_sess_ctx_tuple = curr_sess_ctx.as_tuple(subset_includelist=['format_name','animal','exper_name', 'session_name'])
        curr_sess_ctx_tuple # ('kdiba', 'gor01', 'one', '2006-6-07_11-26-53')

        """
        ...
    
    def has_keys(self, keys_list) -> list[bool]:
        """ returns a boolean array with each entry indicating whether that element in keys_list was found in the context """
        ...
    
    def check_keys(self, keys_list, debug_print=...) -> tuple[bool, list, list]:
        """ checks whether it has the keys or not
        Usage:
            all_keys_found, found_keys, missing_keys = curr_sess_ctx.check_keys(['format_name','animal','exper_name', 'session_name'], debug_print=False)
        """
        ...
    


