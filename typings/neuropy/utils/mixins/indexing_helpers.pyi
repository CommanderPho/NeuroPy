"""
This type stub file was generated by pyright.
"""

from typing import List, Optional

class UnpackableMixin:
    """ Conforming classes will be unpackable like a tuple object.
    Must be an attrs @define class or override `__iter__(self)` manually.

    Usage:

        from neuropy.utils.mixins.indexing_helpers import UnpackableMixin
        from attrs import asdict, astuple, define, field, Factory
    
        # Define a simple attrs class that's better than a namedtuple and unpackable:
        MeasuredDecodedPositionComparison = attrs.make_class("MeasuredDecodedPositionComparison", {k:field() for k in ("measured_positions_dfs_list", "decoded_positions_df_list", "decoded_measured_diff_df")}, bases=(UnpackableMixin, object,))

        

    """
    def UnpackableMixin_unpacking_excludes(self) -> Optional[List]:
        """ Items to be excluded from unpacking. 
        """
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        """ allows unpacking. See https://stackoverflow.com/questions/37837520/implement-packing-unpacking-in-an-object """
        ...
    
    def __len__(self) -> int:
        ...
    


def interleave_elements(start_points, end_points, debug_print: bool = ...): # -> NDArray[Any]:
    """ Given two equal sized arrays, produces an output array of double that size that contains elements of start_points interleaved with elements of end_points
    Example:
        from neuropy.utils.mixins.indexing_helpers import interleave_elements

        a_starts = ['A','B','C','D']
        a_ends = ['a','b','c','d']
        a_interleaved = interleave_elements(a_starts, a_ends)
        >> a_interleaved: ['A','a','B','b','C','c','D','d']
    """
    ...

def get_dict_subset(a_dict: dict, subset_includelist=..., subset_excludelist=...) -> dict:
    """
    Returns a subset of the input dictionary based on the specified inclusion or exclusion lists.

    Inputs:
        a_dict: dict - The dictionary to subset.
        subset_includelist: list, optional - A list of keys to include in the subset. If None, all keys are included.
        subset_excludelist: list, optional - A list of keys to exclude from the subset. If None, no keys are excluded.

    Returns:
        dict: The subset of the input dictionary.
        
    Usage:
        from neuropy.utils.mixins.indexing_helpers import get_dict_subset
        
    """
    ...

